/**!
 *
 * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.
 * @private
 */

export default class Page {
  constructor(res, spark) {
    const items = res.body.items;

    Object.defineProperties(this, {
      items: {
        enumerable: true,
        value: items
      },
      length: {
        get() {
          return this.items.length;
        }
      },
      links: {
        value: Page.parseLinkHeaders(res.headers.link)
      },
      spark: {
        value: spark
      }
    });
  }

  static parseLinkHeaders(linkHeader) {
    if (!linkHeader) {
      return {};
    }

    linkHeader = Array.isArray(linkHeader) || [linkHeader];
    return linkHeader.reduce((links, linkHeader) => {
      linkHeader = linkHeader.split(`;`);
      const link = linkHeader[0].replace(`<`, ``).replace(`>`, ``);
      const rel = linkHeader[1].split(`=`)[1].replace(/"/g, ``);
      links[rel] = link;
      return links;
    }, {});
  }

  next() {
    return this.getLink(`next`);
  }

  hasNext() {
    return this.hasLink(`next`);
  }

  previous() {
    return this.getLink(`previous`);
  }

  hasPrevious() {
    return this.hasLink(`previous`);
  }

  getLink(link) {
    return this.spark.request({
      uri: this.links[link]
    })
      .then((res) => {
        return new Page(res, this.spark);
      });
  }

  hasLink(link) {
    return Boolean(this.links[link]);
  }

  [Symbol.iterator]() {
    let i = -1;
    return {
      next: () => {
        i++;
        if (i < this.length) {
          return {
            value: this.items[i]
          };
        }

        return {done: true};
      }
    };
  }
}
