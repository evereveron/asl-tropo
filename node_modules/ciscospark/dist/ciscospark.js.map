{"version":3,"sources":["../src/ciscospark.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA,qEAA2C;AACzC,gBAAc;;AAEZ,qBAAiB,eAAgB,MAAhB;GAFnB;CADF;AAMA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyEA,IAAM,aAAa,wBAAe;AAChC,eAAa;AACX,mBAAe;AACb,oBAAc,QAAQ,GAAR,CAAY,uBAAZ;AACd,qBAAe,QAAQ,GAAR,CAAY,wBAAZ;KAFjB;GADF;AAMA,0BAPgC;CAAf,CAAb;;;;;;;;;;;;;AAqBN,WAAW,IAAX,GAAkB,SAAS,IAAT,CAAc,KAAd,EAAqB;AACrC,MAAI,mBAAI,KAAJ,iCAA0C,+CAA1C,EAA4E;AAC9E,UAAM,aAAN,GAAsB,EAAtB,CAD8E;AAE9E,kIAQE,OARF,CAQU,UAAC,GAAD,EAAS;AACjB,YAAM,aAAN,CAAoB,GAApB,IAA2B,MAAM,GAAN,CAA3B,CADiB;AAEjB,oCAAuB,KAAvB,EAA8B,GAA9B,EAFiB;KAAT,CARV,CAF8E;GAAhF;AAeA,SAAO,wBAAe,KAAf,CAAP,CAhBqC;CAArB;;kBAmBH","file":"ciscospark.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\n/* eslint camelcase: [0] */\n\nimport AuthInterceptor from './interceptors/auth';\nimport config from './config';\nimport {default as CiscoSpark, registerPlugin} from '@ciscospark/spark-core';\nimport {has} from 'lodash';\nimport Memberships from './plugins/memberships';\nimport Messages from './plugins/messages';\nimport People from './plugins/people';\nimport Rooms from './plugins/rooms';\nimport Webhooks from './plugins/webhooks';\n\nregisterPlugin(`memberships`, Memberships, {\n  interceptors: {\n    // TODO should be able to register interceptors separately from plugins.\n    AuthInterceptor: AuthInterceptor.create\n  }\n});\nregisterPlugin(`messages`, Messages);\nregisterPlugin(`people`, People);\nregisterPlugin(`rooms`, Rooms);\nregisterPlugin(`webhooks`, Webhooks);\n\n/**\n * SDK for Cisco Spark\n *\n * ## Installation\n *\n * ```javascript\n * npm install --save ciscospark\n * ```\n *\n * ## A Note on Browsers\n * Ciscospark is fully browser compatible but we don't distribute a browserified\n * bundle at this time; you'll need to build the bundle yourself. We use\n * [browserify](http://browserify.org/) internally and\n * [webpack](https://webpack.github.io/) should work as well.\n *\n * ## Getting Started\n *\n * > The examples below have both ES5 and ES6 variations. The ES6 examples will\n * > require you to build your project using [babel](https://babeljs.io). The\n * > ES5 examples should be directly runnable.\n *\n * The quickest way to get started is to set your access token as an environment\n * variable:\n *\n * ```javascript\n * <%= gettingstarted__accesstoken_es6 %>\n * ```\n * ```javascript\n * <%= gettingstarted__accesstoken %>\n * ```\n\n * ### Refresh Tokens\n *\n * For long-running use cases, you'll need to provide a refresh token, client\n * id, and client secret:\n *\n * ```javascript\n * <%= gettingstarted__oauth__refreshtokens_es6 %>\n * ```\n *\n * ## Runtime Configuration\n *\n * While environment variables are handy for development, they don't really help\n * you write an app for lots of users. You can pass credentials to the spark\n * using init.\n *\n * ```javascript\n * <%= gettingstarted__runtimeconfiguration__init_es6 %>\n * ```\n *\n * ## OAuth\n *\n * OAuth is baked right into spark so you don't need to figure it out.\n *\n * To kick off an OAuth login, simply call `spark.authenticate()` which will\n * direct the current app to our login page.\n *\n * ```javascript\n * <%= gettingstarted__oauth__authenticate_es6 %>\n * ```\n *\n * To refresh an access token, call `spark.authorize()`. (Note: this should\n * generally happen for you automatically).\n *\n * ```javascript\n * <%= gettingstarted__oauth__authorize_es6 %>\n * ```\n *\n * @class CiscoSpark\n * @extends SparkCore\n */\nconst ciscospark = new CiscoSpark({\n  credentials: {\n    authorization: {\n      access_token: process.env.CISCOSPARK_ACCESS_TOKEN,\n      refresh_token: process.env.CISCOSPARK_REFRESH_TOKEN\n    }\n  },\n  config\n});\n\n/**\n * While environment variables are handy for development, they don't really help\n * you write an app for lots of users. You can pass credentials to the spark\n * using init.\n * @param {Object} attrs\n * @param {Object} attrs.credentials\n * @memberof CiscoSpark\n * @returns {CiscoSpark}\n * @private\n * Private for now until we workout a bit more with the config object\n */\nciscospark.init = function init(attrs) {\n  if (has(attrs, `credentials.access_token`) || has(`credentials.refresh_token`)) {\n    attrs.authorization = {};\n    [\n      `access_token`,\n      `token_type`,\n      `expires`,\n      `expires_in`,\n      `refresh_token`,\n      `refresh_token_expires`,\n      `refresh_token_expires_in`\n    ].forEach((key) => {\n      attrs.authorization[key] = attrs[key];\n      Reflect.deleteProperty(attrs, key);\n    });\n  }\n  return new CiscoSpark(attrs);\n};\n\nexport default ciscospark;\n"]}