{"version":3,"sources":["../../src/plugins/messages.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,IAAM,WAAW,uBAAY,MAAZ;;AAEf;;;;;;;;;;;AAUA,0BAAO,SAAS;AACd,WAAO,KAAK,OAAL,CAAa;AAClB,oBADkB;AAElB,WAAQ,KAAK,MAAL,CAAY,eAAZ,cAAR;AACA,YAAM,OAAN;KAHK,EAKJ,IALI,CAKC,UAAC,GAAD;aAAS,IAAI,IAAJ;KAAT,CALR,CADc;GAVhB;;;;;;;;;;;;AA4BA,oBAAI,SAAS;AACX,QAAM,KAAK,QAAQ,EAAR,IAAc,OAAd,CADA;;AAGX,WAAO,KAAK,OAAL,CAAa;AACjB,WAAQ,KAAK,MAAL,CAAY,eAAZ,kBAAwC,EAAhD;KADI,EAGJ,IAHI,CAGC,UAAC,GAAD;aAAS,IAAI,IAAJ,CAAS,KAAT,IAAkB,IAAI,IAAJ;KAA3B,CAHR,CAHW;GA5Bb;;;;;;;;;;;;;;;AAiDA,sBAAK,SAAS;;;AACZ,WAAO,KAAK,OAAL,CAAa;AAClB,WAAQ,KAAK,MAAL,CAAY,eAAZ,cAAR;AACA,UAAI,OAAJ;KAFK,EAIJ,IAJI,CAIC,UAAC,GAAD;aAAS,mBAAS,GAAT,EAAc,MAAK,KAAL;KAAvB,CAJR,CADY;GAjDd;;;;;;;;;;;;;;;AAqEA,0BAAO,SAAS;AACd,QAAM,KAAK,QAAQ,EAAR,IAAc,OAAd,CADG;;AAGd,WAAO,KAAK,OAAL,CAAa;AAClB,sBADkB;AAElB,WAAQ,KAAK,MAAL,CAAY,eAAZ,kBAAwC,EAAhD;KAFK,EAIJ,IAJI,CAIC,UAAC,GAAD,EAAS;;;AAGb,UAAI,IAAI,UAAJ,KAAmB,GAAnB,EAAwB;AAC1B,eAAO,SAAP,CAD0B;OAA5B;AAGA,aAAO,IAAI,IAAJ,CANM;KAAT,CAJR,CAHc;GArEhB;CAFe,CAAX;;kBAyFS","file":"messages.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\nimport {SparkPlugin} from '@ciscospark/spark-core';\nimport Page from '../lib/page';\n\n/**\n * @typedef {Object} Types~Message\n * @property {uuid} id - (server generated) Unique identifier for the message\n * @property {uuid} personId - The ID for the author of the messasge\n * @property {email} personEmail - The email for the author of the messasge\n * @property {string} roomId - The message posted to the room in plain text\n * @property {isoDate} created - (server generated)The source URLs for the\n * message attachment. See the {@link Content & Attachments{ Guide for a list of\n * supported media types.\n */\n\n/**\n * Messages are how people communicate in rooms. Each message timestamped and\n * represented in Spark as a distinct block of content. Messages can contain\n * plain text and a single file attachment. See the\n * {@link Message Attachments Guide} for a list of supported media types.\n * @class\n * @extends SparkPlugin\n */\nconst Messages = SparkPlugin.extend(\n  /** @lends Messages.prototype */\n  {\n  /**\n   * Post a new message and/or media content into a room.\n   * @param {Types~Message} message\n   * @returns {Promise<Types~Message>}\n   * @example\n   * <%= messages__create_es6 %>\n   * @example\n   * <%= messages__create %>\n   */\n  create(message) {\n    return this.request({\n      method: `POST`,\n      uri: `${this.config.hydraServiceUrl}/messages`,\n      body: message\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Returns a single message.\n   * @param {Types~Room|string} message\n   * @returns {Promise<Types~Message>}\n   * @example\n   * <%= messages__get_es6 %>\n   * @example\n   * <%= messages__get %>\n   */\n  get(message) {\n    const id = message.id || message;\n\n    return this.request({\n       uri: `${this.config.hydraServiceUrl}/messages/${id}`\n    })\n      .then((res) => res.body.items || res.body);\n  },\n\n  /**\n   * Returns a list of messages. In most cases the results will only contain\n   * messages posted in rooms that the authentiated user is a member of.\n   * @param {Object} options\n   * @param {string} options.roomId\n   * @param {number} options.max\n   * @returns {Promise<Page<Types~Message>>}\n   * @example\n   * <%= messages__list_es6 %>\n   * @example\n   * <%= messages__list %>\n   */\n  list(options) {\n    return this.request({\n      uri: `${this.config.hydraServiceUrl}/messages`,\n      qs: options\n    })\n      .then((res) => new Page(res, this.spark));\n  },\n\n  /**\n   * Deletes a single message. Deleting a message will notify all members of the\n   * room that the authenticated user deleted the message. Generally, users can\n   * only delete their own messages except for the case of Moderated Rooms and\n   * Org Administrators.\n   * @param {Types~Message|uuid} message\n   * @returns {Promise}}\n   * @example\n   * <%= messages__remove_es6 %>\n   * @example\n   * <%= messages__remove %>\n   */\n  remove(message) {\n    const id = message.id || message;\n\n    return this.request({\n      method: `DELETE`,\n      uri: `${this.config.hydraServiceUrl}/messages/${id}`\n    })\n      .then((res) => {\n        // Firefox has some issues with 204s and/or DELETE. This should move to\n        // http-core\n        if (res.statusCode === 204) {\n          return undefined;\n        }\n        return res.body;\n      });\n  }\n});\n\nexport default Messages;\n"]}