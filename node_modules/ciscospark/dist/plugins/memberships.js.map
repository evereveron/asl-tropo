{"version":3,"sources":["../../src/plugins/memberships.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,IAAM,cAAc,uBAAY,MAAZ;;AAElB;;;;;;;;;;;;;AAYA,0BAAO,YAAY;AACjB,WAAO,KAAK,OAAL,CAAa;AAClB,oBADkB;AAElB,WAAQ,KAAK,MAAL,CAAY,eAAZ,iBAAR;AACA,YAAM,UAAN;KAHK,EAKJ,IALI,CAKC,UAAC,GAAD;aAAS,IAAI,IAAJ;KAAT,CALR,CADiB;GAZnB;;;;;;;;;;;;AA8BA,oBAAI,YAAY;AACd,QAAM,KAAK,WAAW,EAAX,IAAiB,UAAjB,CADG;AAEd,WAAO,KAAK,OAAL,CAAa;AAClB,WAAQ,KAAK,MAAL,CAAY,eAAZ,qBAA2C,EAAnD;KADK,EAGJ,IAHI,CAGC,UAAC,GAAD;aAAS,IAAI,IAAJ,CAAS,KAAT,IAAkB,IAAI,IAAJ;KAA3B,CAHR,CAFc;GA9BhB;;;;;;;;;;;;;;;;;;;AAsDA,sBAAK,SAAS;;;AACZ,WAAO,KAAK,OAAL,CAAa;AAClB,WAAQ,KAAK,MAAL,CAAY,eAAZ,iBAAR;AACA,UAAI,OAAJ;KAFK,EAIJ,IAJI,CAIC,UAAC,GAAD;aAAS,mBAAS,GAAT,EAAc,MAAK,KAAL;KAAvB,CAJR,CADY;GAtDd;;;;;;;;;;;;AAuEA,0BAAO,YAAY;AACjB,QAAM,KAAK,WAAW,EAAX,IAAiB,UAAjB,CADM;;AAGjB,WAAO,KAAK,OAAL,CAAa;AAClB,sBADkB;AAElB,WAAQ,KAAK,MAAL,CAAY,eAAZ,qBAA2C,EAAnD;KAFK,EAIJ,IAJI,CAIC,UAAC,GAAD,EAAS;;;AAGb,UAAI,IAAI,UAAJ,KAAmB,GAAnB,EAAwB;AAC1B,eAAO,SAAP,CAD0B;OAA5B;AAGA,aAAO,IAAI,IAAJ,CANM;KAAT,CAJR,CAHiB;GAvEnB;;;;;;;;;;;;AAiGA,0BAAO,YAAY;AACjB,QAAM,KAAK,WAAW,EAAX,IAAiB,UAAjB,CADM;AAEjB,WAAO,KAAK,OAAL,CAAa;AAClB,mBADkB;AAElB,WAAQ,KAAK,MAAL,CAAY,eAAZ,qBAA2C,EAAnD;AACA,YAAM,UAAN;KAHK,EAKJ,IALI,CAKC,UAAC,GAAD;aAAS,IAAI,IAAJ;KAAT,CALR,CAFiB;GAjGnB;CAFkB,CAAd;;kBA8GS","file":"memberships.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\nimport {SparkPlugin} from '@ciscospark/spark-core';\nimport Page from '../lib/page';\n\n/**\n * @typedef {Object} Types~Membership\n * @property {uuid} id - Unique identifier for the membership\n * @property {string} roomId - The room ID\n * @property {uuid} personId - The person ID\n * @property {email} personEmail - The email address of the person / room member\n * @property {boolean} isModerator - Indicates whether the specified person should be a room moderator.\n * @property {boolean} isMonitor - Indicates whether the specified member is a room monitor.\n * @property {isoDate} created - The date and time that this membership was created.\n */\n\n/**\n * @class\n * @extends SparkPlugin\n */\nconst Memberships = SparkPlugin.extend(\n  /** @lends Memberships.prototype */\n  {\n  /**\n   * Adds a person to a room. The person can be added by ID (personId) or by\n   * Email Address (personEmail). The person can be optionally added to the room\n   * as a moderator.\n   * @param {Types~Membership} membership\n   * @returns {Promise<Types~Membership>}\n   * @example\n   * <%= memberships__create_es6 %>\n   * @example\n   * <%= memberships__create %>\n   */\n  create(membership) {\n    return this.request({\n      method: `POST`,\n      uri: `${this.config.hydraServiceUrl}/memberships`,\n      body: membership\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Returns a single membership.\n   * @param {Types~Membership|uuid} membership\n   * @returns {Promise<Types~Membership>}\n   * @example\n   * <%= memberships__get_es6 %>\n   * @example\n   * <%= memberships__get %>\n   */\n  get(membership) {\n    const id = membership.id || membership;\n    return this.request({\n      uri: `${this.config.hydraServiceUrl}/memberships/${id}`\n    })\n      .then((res) => res.body.items || res.body);\n  },\n\n  /**\n   * Returns a list of memberships. In most cases the results will only contain\n   * rooms that the authentiated user is a member of. You can filter the results\n   * by room to list people in a room or by person to find rooms that a\n   * specific person is a member of.\n   * @param {Object} options\n   * @param {string} options.personId\n   * @param {string} options.personEmail\n   * @param {string} options.roomId\n   * @param {number} options.max\n   * @returns {Promise<Page<Types~Membership>>}\n   * @example\n   * <%= memberships__list_es6 %>\n   * @example\n   * <%= memberships__list %>\n   */\n  list(options) {\n    return this.request({\n      uri: `${this.config.hydraServiceUrl}/memberships`,\n      qs: options\n    })\n      .then((res) => new Page(res, this.spark));\n  },\n\n  /**\n   * Deletes a single membership.\n   * @param {Types~Membership|uuid} membership\n   * @returns {Promise}\n   * @example\n   * <%= memberships__remove_es6 %>\n   * @example\n   * <%= memberships__remove %>\n   */\n  remove(membership) {\n    const id = membership.id || membership;\n\n    return this.request({\n      method: `DELETE`,\n      uri: `${this.config.hydraServiceUrl}/memberships/${id}`\n    })\n      .then((res) => {\n        // Firefox has some issues with 204s and/or DELETE. This should move to\n        // http-core\n        if (res.statusCode === 204) {\n          return undefined;\n        }\n        return res.body;\n      });\n  },\n\n  /**\n   * Used to update a single membership's properties\n   * @param {Types~Membership|uuid} membership\n   * @returns {Promise<Types~Membership>}\n   * @example\n   * <%= memberships__update_es6 %>\n   * @example\n   * <%= memberships__update %>\n   */\n  update(membership) {\n    const id = membership.id || membership;\n    return this.request({\n      method: `PUT`,\n      uri: `${this.config.hydraServiceUrl}/memberships/${id}`,\n      body: membership\n    })\n      .then((res) => res.body);\n  }\n});\n\nexport default Memberships;\n"]}