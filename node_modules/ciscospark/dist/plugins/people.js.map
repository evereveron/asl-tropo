{"version":3,"sources":["../../src/plugins/people.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,IAAM,SAAS,uBAAY,MAAZ;;AAEb;;;;;;;;;;;AAUA,oBAAI,QAAQ;AACV,QAAM,KAAK,OAAO,QAAP,IAAmB,OAAO,EAAP,IAAa,MAAhC,CADD;AAEV,WAAO,KAAK,OAAL,CAAa;AAClB,WAAQ,KAAK,MAAL,CAAY,eAAZ,gBAAsC,EAA9C;KADK,EAGJ,IAHI,CAGC,UAAC,GAAD;aAAS,IAAI,IAAJ;KAAT,CAHR,CAFU;GAVZ;;;;;;;;;;;;;;AA6BA,sBAAK,SAAS;;;AACZ,WAAO,KAAK,OAAL,CAAa;AAClB,WAAQ,KAAK,MAAL,CAAY,eAAZ,YAAR;AACA,UAAI,OAAJ;KAFK,EAIJ,IAJI,CAIC,UAAC,GAAD;aAAS,mBAAS,GAAT,EAAc,MAAK,KAAL;KAAvB,CAJR,CADY;GA7Bd;CAFa,CAAT;;kBAwCS","file":"people.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\nimport {SparkPlugin} from '@ciscospark/spark-core';\nimport Page from '../lib/page';\n\n/**\n * @typedef {Object} Types~Person\n * @property {uuid} id - Unique identifier for the person\n * @property {Array<email>} emails - Email addresses of the person\n * @property {string} displayName - Display name of the person\n * @property {isoDate} created - The date and time that the person was created\n */\n\n/**\n * @class\n * @extends SparkPlugin\n */\nconst People = SparkPlugin.extend(\n  /** @lends People.prototype */\n  {\n  /**\n   * Returns a single person by ID\n   * @param {Types~Person|uuid} person\n   * @returns {Promise<Types~Person>}\n   * @example\n   * <%= people__get_es6 %>\n   * @example\n   * <%= people__get %>\n   */\n  get(person) {\n    const id = person.personId || person.id || person;\n    return this.request({\n      uri: `${this.config.hydraServiceUrl}/people/${id}`\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Returns a list of people\n   * @param {Object} options\n   * @param {email} options.email - Returns people with an email that contains this string\n   * @param {string} options.name - Returns people with a name that contains this string\n   * @returns {Promise<Page<Types~Person>>}\n   * @example\n   * <%= people__list_es6 %>\n   * @example\n   * <%= people__list %>\n   */\n  list(options) {\n    return this.request({\n      uri: `${this.config.hydraServiceUrl}/people`,\n      qs: options\n    })\n      .then((res) => new Page(res, this.spark));\n  }\n});\n\nexport default People;\n"]}