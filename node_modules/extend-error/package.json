{
  "_args": [
    [
      "extend-error@git://github.com/ianwremmel/extend-error.git",
      "c:\\Users\\Jasmine\\Desktop\\asl-tropo\\node_modules\\@ciscospark\\http-core"
    ]
  ],
  "_from": "git://github.com/ianwremmel/extend-error.git",
  "_id": "extend-error@0.0.2",
  "_inCache": true,
  "_installable": true,
  "_location": "/extend-error",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/ianwremmel/extend-error/master/package.json",
      "gitUrl": "git://github.com/ianwremmel/extend-error.git",
      "httpsUrl": "git+https://github.com/ianwremmel/extend-error.git",
      "shortcut": "github:ianwremmel/extend-error",
      "ssh": "git@github.com:ianwremmel/extend-error.git",
      "sshUrl": "git+ssh://git@github.com/ianwremmel/extend-error.git",
      "type": "github"
    },
    "name": "extend-error",
    "raw": "extend-error@git://github.com/ianwremmel/extend-error.git",
    "rawSpec": "git://github.com/ianwremmel/extend-error.git",
    "scope": null,
    "spec": "git://github.com/ianwremmel/extend-error.git",
    "type": "hosted"
  },
  "_requiredBy": [
    "/@ciscospark/http-core",
    "/@ciscospark/spark-core"
  ],
  "_resolved": "git://github.com/ianwremmel/extend-error.git#d9626f4005cd3b94d3df3d24cd1b59fd6df09ddd",
  "_shasum": "7013246099eaf85fe5843a349ad72cd229aa8116",
  "_shrinkwrap": null,
  "_spec": "extend-error@git://github.com/ianwremmel/extend-error.git",
  "_where": "c:\\Users\\Jasmine\\Desktop\\asl-tropo\\node_modules\\@ciscospark\\http-core",
  "author": {
    "email": "jayyvis@gmail.com",
    "name": "Jayy Vis"
  },
  "bugs": {
    "url": "https://github.com/jayyvis/extend-error/issues"
  },
  "contributors": [
    {
      "name": "Ian W. Remmel",
      "email": "design@ianwremmel.com"
    }
  ],
  "dependencies": {
    "lodash.clonedeep": "~3.0.0",
    "lodash.forown": "~3.0.1",
    "lodash.identity": "~3.0.0"
  },
  "description": "Easily define custom error types in Node.js",
  "devDependencies": {
    "karma": "~0.12.31",
    "karma-browserify": "~4.1.2",
    "karma-chrome-launcher": "~0.1.8",
    "karma-cli": "0.0.4",
    "karma-firefox-launcher": "~0.1.4",
    "karma-mocha": "~0.1.10",
    "karma-mocha-reporter": "~1.0.2",
    "karma-sauce-launcher": "~0.2.10",
    "mocha": "*"
  },
  "gitHead": "d9626f4005cd3b94d3df3d24cd1b59fd6df09ddd",
  "homepage": "https://github.com/jayyvis/extend-error#readme",
  "license": "MIT",
  "main": "index.js",
  "name": "extend-error",
  "optionalDependencies": {},
  "readme": "# extend-error\r\n[![Build Status](https://travis-ci.org/ianwremmel/extend-error.svg)](https://travis-ci.org/ianwremmel/extend-error) [![Dependencies](https://david-dm.org/ianwremmel/extend-error.svg)](https://david-dm.org/ianwremmel/extend-error)\r\n[![Browser Status](https://drone.io/github.com/ianwremmel/extend-error/status.png)](https://drone.io/github.com/ianwremmel/extend-error/latest)\r\n\r\nEver tried to create custom error types in Node.js and wished it should be this simple?\r\n\r\n```\r\nvar MyError = Error.extend('MyError');\r\n```\r\n\r\n```\r\nthrow MyError('wow')\r\n```\r\n\r\n### installation\r\n\r\n```\r\nnpm install extend-error\r\n```\r\n\r\nand in your app.js, just ```require('extend-error').polyfill()```. It will provide you an extend() method for the Error type.\r\n\r\n### syntax\r\n- extend() takes two arguments : subTypeName & errorCode [optional]\r\n- it returns the newly created error type\r\n\r\n#### polyfilling\r\n\r\nAll of the examples here assume you ran `polyfill()`. If you're not comfortable with modifying native objects, you can use `extendError()` directly.\r\n\r\n```\r\nvar extendError = require('extend-error');\r\nvar ClientError = extendError('ClientError', 400);\r\nvar HttpNotFound = extendError(ClientError, HttpNotFound, 404);\r\n```\r\n\r\n### more examples for a web app\r\n\r\n```\r\nvar AppError = Error.extend('AppError', 500);\r\nvar ClientError = Error.extend('ClientError', 400);\r\n```\r\n\r\nextend ClientError further for specific http types\r\n\r\n```\r\nvar HttpNotFound = ClientError.extend('HttpNotFoundError', 404);\r\nvar HttpUnauthorized = ClientError.extend('HttpUnauthorized', 401);\r\n```\r\n\r\n### throwing errors\r\n\r\n```\r\nthrow new AppError('unable to connect db due to error: ' + err);\r\n\r\nthrow new ClientError({'message':'required field missing', field: 'email'})\r\n\r\nthrow new HttpNotFound('no post found with id: ' + id);\r\n\r\nthrow new HttpNotFound({'message': 'no such post', 'id': id});\r\n```\r\n\r\n### don't worry when you forget 'new'\r\n\r\n```\r\nthrow ClientError('bad request');\r\n```\r\n\r\n### instanceof\r\n\r\nthrow an error in controller\r\n\r\n```\r\nvar err = HttpNotFound('user profile not found');\r\n\r\nthrow err;\r\n(or)\r\ncallback(err)\r\n```\r\n\r\nhandle it easily in global error handler (in case of express.js error middleware)\r\n\r\n```\r\nif (err instanceof ClientError) {\r\n\t//send out the actual message\r\n\tres.send(err.code, err.message);\r\n} else {\r\n\t//send out a generic message\r\n\tres.send(500, 'oops! something went wrong');\r\n\tlog.error(err);\r\n}\r\n\r\n```\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/jayyvis/extend-error.git"
  },
  "scripts": {
    "test": "mocha --ui bdd",
    "test-browser": "karma start karma-ci.conf.js"
  },
  "version": "0.0.2"
}
