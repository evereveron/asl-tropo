{"version":3,"sources":["../../src/request/index.js"],"names":[],"mappings":";;;;;;;;;;kBAYwB;;;;;;;;;;;;;;;;;;;AAAT,SAAS,OAAT,CAAiB,OAAjB,EAA0B;AACvC,MAAI,QAAQ,GAAR,EAAa;AACf,YAAQ,GAAR,GAAc,QAAQ,GAAR,CADC;AAEf,YAAQ,GAAR,GAAc,IAAd,CAFe;GAAjB;;AAKA,UAAQ,OAAR,GAAkB,QAAQ,OAAR,IAAmB,EAAnB,CANqB;;AAQvC,UAAQ,QAAR,GAAmB,0BAAnB,CARuC;AASvC,UAAQ,MAAR,GAAiB,0BAAjB,CATuC;;AAWvC,SAAO,UAAU,QAAQ,YAAR,WAAV,EACJ,IADI,CACC;sCAAI;;;;WAAS,oCAAS,gBAAY,KAArB;GAAb,CADD,CAEJ,IAFI,CAEC;uCAAI;;;;WAAS,4BAAU,QAAQ,YAAR,CAAqB,KAArB,GAA6B,OAA7B,uBAAuD,KAAjE;GAAb,CAFR;;;;;;;;;AAXuC,WAsB9B,SAAT,CAAmB,YAAnB,EAAiC,GAAjC,EAAsC,GAAtC,EAA2C;AACzC,QAAM,oBAAkB,GAAlB,CADmC;AAEzC,QAAM,kBAAgB,aAAhB,CAFmC;;AAIzC,WAAO,aAAa,MAAb,CAAoB,UAAC,OAAD,EAAU,WAAV,EAA0B;AACnD,aAAO,QAAQ,IAAR,CACL,UAAC,MAAD,EAAY;AACV,YAAI,YAAY,UAAZ,CAAJ,EAA6B;AAC3B,iBAAO,YAAY,UAAZ,EAAwB,OAAxB,EAAiC,MAAjC,CAAP,CAD2B;SAA7B;AAGA,eAAO,kBAAQ,OAAR,CAAgB,MAAhB,CAAP,CAJU;OAAZ,EAMA,UAAC,MAAD,EAAY;AACV,YAAI,YAAY,QAAZ,CAAJ,EAA2B;AACzB,iBAAO,YAAY,QAAZ,EAAsB,OAAtB,EAA+B,MAA/B,CAAP,CADyB;SAA3B;AAGA,eAAO,kBAAQ,MAAR,CAAe,MAAf,CAAP,CAJU;OAAZ,CAPF,CADmD;KAA1B,EAexB,kBAAQ,OAAR,CAAgB,GAAhB,CAfI,CAAP,CAJyC;GAA3C;CAtBa","file":"index.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport _request from './request';\nimport {EventEmitter} from 'events';\n\n/**\n * @param {Object} options\n * @returns {Promise}\n */\nexport default function request(options) {\n  if (options.url) {\n    options.uri = options.url;\n    options.url = null;\n  }\n\n  options.headers = options.headers || {};\n\n  options.download = new EventEmitter();\n  options.upload = new EventEmitter();\n\n  return intercept(options.interceptors, `Request`)\n    .then((...args) => _request(options, ...args))\n    .then((...args) => intercept(options.interceptors.slice().reverse(), `Response`, ...args));\n\n  /**\n   * @param {Array} interceptors\n   * @param {string} key\n   * @param {Object} res\n   * @private\n   * @returns {Promise}\n   */\n  function intercept(interceptors, key, res) {\n    const successKey = `on${key}`;\n    const errorKey = `on${key}Error`;\n\n    return interceptors.reduce((promise, interceptor) => {\n      return promise.then(\n        (result) => {\n          if (interceptor[successKey]) {\n            return interceptor[successKey](options, result);\n          }\n          return Promise.resolve(result);\n        },\n        (reason) => {\n          if (interceptor[errorKey]) {\n            return interceptor[errorKey](options, reason);\n          }\n          return Promise.reject(reason);\n        }\n      );\n    }, Promise.resolve(res));\n  }\n}\n"]}