{"version":3,"sources":["../../src/request/request.js"],"names":[],"mappings":";;;;;;;;;;kBA+EwB;;;;;;;;;;;;;;;;;;;;;AAjExB,SAAS,cAAT,CAAwB,OAAxB,EAAiC;AAC/B,MAAI,QAAQ,YAAR,iBAAqC,QAAQ,YAAR,WAArC,EAAsE;AACxE,YAAQ,QAAR,GAAmB,IAAnB,CADwE;GAA1E;;AAIA,MAAI,QAAQ,eAAR,EAAyB;AAC3B,YAAQ,GAAR,GAAc,IAAd,CAD2B;GAA7B;;AAIA,MAAI,OAAO,QAAP,CAAgB,QAAQ,IAAR,CAApB,EAAmC;AACjC,WAAO,sBAAO,QAAQ,IAAR,CAAP,CACJ,IADI,CACC,UAAC,IAAD,EAAU;AACd,cAAQ,OAAR,mBAAkC,IAAlC,CADc;AAEd,aAAO,OAAP,CAFc;KAAV,CADR,CADiC;GAAnC;;AAQA,SAAO,kBAAQ,OAAR,CAAgB,OAAhB,CAAP,CAjB+B;CAAjC;;;;;;;;;;;;AAyBA,SAAS,SAAT,CAAmB,OAAnB,EAA4B;AAC1B,SAAO,sBAAY,UAAC,OAAD,EAAa;AAC9B,QAAM,IAAI,uBAAQ,OAAR,EAAiB,UAAC,KAAD,EAAQ,QAAR,EAAqB;AAC9C,UAAI,KAAJ,EAAW;AACT,gBAAQ,MAAR,CAAe,IAAf,CAAoB,KAApB,EADS;OAAX;;AAIA,UAAI,QAAJ,EAAc;AACZ,iBAAS,OAAT,GAAmB,OAAnB,CADY;AAEZ,gBAAQ,QAAR,EAFY;OAAd,MAIK;;AAEH,gBAAQ;AACN,sBAAY,CAAZ;AACA,0BAFM;AAGN,mBAAS,QAAQ,OAAR;AACT,kBAAQ,QAAQ,MAAR;AACR,eAAK,QAAQ,GAAR;AACL,gBAAM,KAAN;SANF,EAFG;OAJL;KALyB,CAArB,CADwB;;AAuB9B,MAAE,EAAF,aAAiB,UAAC,QAAD,EAAc;AAC7B,UAAM,QAAQ,SAAS,SAAS,OAAT,kBAAT,EAA6C,EAA7C,CAAR,CADuB;AAE7B,UAAI,SAAS,CAAT,CAFyB;AAG7B,eAAS,EAAT,SAAoB,UAAC,IAAD,EAAU;AAC5B,kBAAU,KAAK,MAAL,CADkB;AAE5B,gBAAQ,QAAR,CAAiB,IAAjB,aAAkC,4BAAkB,MAAlB,EAA0B,KAA1B,CAAlC,EAF4B;OAAV,CAApB,CAH6B;KAAd,CAAjB,CAvB8B;GAAb,CAAnB,CAD0B;CAA5B;;;;;;;AAwCe,SAAS,QAAT,CAAkB,OAAlB,EAA2B;AACxC,SAAO,eAAe,OAAf,EACJ,IADI,CACC,SADD,CAAP,CADwC;CAA3B","file":"request.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport detect from '../lib/detect';\nimport ProgressEvent from '../progress-event';\nimport request from 'request';\n\n/**\n * @param {Object} options\n * @private\n * @returns {Promise}\n */\nfunction prepareOptions(options) {\n  if (options.responseType === `buffer` || options.responseType === `blob`) {\n    options.encoding = null;\n  }\n\n  if (options.withCredentials) {\n    options.jar = true;\n  }\n\n  if (Buffer.isBuffer(options.body)) {\n    return detect(options.body)\n      .then((type) => {\n        options.headers[`content-type`] = type;\n        return options;\n      });\n  }\n\n  return Promise.resolve(options);\n}\n\n/**\n * @param {Object} options\n * @private\n * @returns {Promise}\n */\nfunction doRequest(options) {\n  return new Promise((resolve) => {\n    const r = request(options, (error, response) => {\n      if (error) {\n        options.logger.warn(error);\n      }\n\n      if (response) {\n        response.options = options;\n        resolve(response);\n      }\n      else {\n        // Make a network error behave like a browser network error.\n        resolve({\n          statusCode: 0,\n          options,\n          headers: options.headers,\n          method: options.method,\n          url: options.url,\n          body: error\n        });\n      }\n    });\n\n    r.on(`response`, (response) => {\n      const total = parseInt(response.headers[`content-length`], 10);\n      let loaded = 0;\n      response.on(`data`, (data) => {\n        loaded += data.length;\n        options.download.emit(`progress`, new ProgressEvent(loaded, total));\n      });\n    });\n  });\n}\n\n/**\n * @name request\n * @param {Object} options\n * @returns {Promise}\n */\nexport default function _request(options) {\n  return prepareOptions(options)\n    .then(doRequest);\n}\n"]}