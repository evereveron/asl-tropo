{"version":3,"sources":["../../src/interceptors/http-status.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAQqB;;;AACnB,WADmB,qBACnB,CAAY,OAAZ,EAAqB;wCADF,uBACE;;6FADF,mCACE;;AAGnB,QAAM,mBAAmB,YAAY,QAAQ,KAAR,IAAiB,QAAQ,gBAAR,CAA7B,uBAAnB,CAHa;;AAKnB,2CAA8B;AAC5B,wBAAkB;AAChB,eAAO,gBAAP;OADF;KADF,EALmB;;GAArB;;6BADmB;;+BAiBR,SAAS,UAAU;AAC5B,UAAI,SAAS,UAAT,IAAuB,SAAS,UAAT,GAAsB,GAAtB,EAA2B;AACpD,eAAO,kBAAQ,OAAR,CAAgB,QAAhB,CAAP,CADoD;OAAtD;;;;;;;AAD4B,aAUrB,kBAAQ,MAAR,CAAe,KAAK,KAAK,gBAAL,CAAsB,MAAtB,CAA6B,SAAS,UAAT,EAAlC,CAAwD,QAAxD,CAAf,CAAP,CAV4B;;;;2BAJhB,SAAS;AACrB,aAAO,IAAI,qBAAJ,CAA0B,OAA1B,CAAP,CADqB;;;SAbJ","file":"http-status.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport HttpError from '../http-error';\nimport Interceptor from '../lib/interceptor';\n\nexport default class HttpStatusInterceptor extends Interceptor {\n  constructor(options) {\n    super();\n\n    const ErrorConstructor = options && (options.error || options.ErrorConstructor) || HttpError;\n\n    Object.defineProperties(this, {\n      ErrorConstructor: {\n        value: ErrorConstructor\n      }\n    });\n  }\n\n  static create(options) {\n    return new HttpStatusInterceptor(options);\n  }\n\n  onResponse(options, response) {\n    if (response.statusCode && response.statusCode < 400) {\n      return Promise.resolve(response);\n    }\n\n    // Note: the extra parenthesis below are required to make sure `new` is\n    // applied to the correct method (i.e., the result of `select()`, not\n    // `select()` itself).\n    // TODO figure out how to get rid of `select` so that alternate\n    // implementations don't need to supply it.\n    return Promise.reject(new (this.ErrorConstructor.select(response.statusCode))(response));\n  }\n}\n"]}