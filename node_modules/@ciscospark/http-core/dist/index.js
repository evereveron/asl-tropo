'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HttpStatusInterceptor = exports.HttpError = exports.Interceptor = exports.ProgressEvent = exports.request = exports.defaults = undefined;

var _defaults = require('lodash/defaults');

var _defaults2 = _interopRequireDefault(_defaults);

var _isString = require('lodash/isString');

var _isString2 = _interopRequireDefault(_isString);

var _curry = require('lodash/curry');

var _curry2 = _interopRequireDefault(_curry);

var _progressEvent = require('./progress-event');

Object.defineProperty(exports, 'ProgressEvent', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_progressEvent).default;
  }
});

var _interceptor = require('./lib/interceptor');

Object.defineProperty(exports, 'Interceptor', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_interceptor).default;
  }
});

var _httpError = require('./http-error');

Object.defineProperty(exports, 'HttpError', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_httpError).default;
  }
});

var _httpStatus = require('./interceptors/http-status');

Object.defineProperty(exports, 'HttpStatusInterceptor', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_httpStatus).default;
  }
});

var _httpStatus2 = _interopRequireDefault(_httpStatus);

var _request2 = require('./request');

var _request3 = _interopRequireDefault(_request2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Curry protorequest so we generate a function with default options built in.
var protorequest = (0, _curry2.default)(function protorequest(defaultOptions, options) {
  // allow for options to be a string (and therefore expect options in the third
  // position) to match request's api.
  if ((0, _isString2.default)(options)) {
    var uri = options;
    options = arguments[2] || {};
    options.uri = uri;
  }

  (0, _defaults2.default)(options, defaultOptions);

  // TODO figure out how to throw an error if `options.interceptors` does not
  // contain an instance of HttpStatusInterceptor

  options.logger = options.logger || console;

  return (0, _request3.default)(options);
}); /**!
     *
     * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.
     */

var defaultOptions = {
  json: true,
  interceptors: [_httpStatus2.default.create()]
};

// const request = protorequest(defaultOptions);
var defaults = exports.defaults = protorequest;
var request = exports.request = protorequest(defaultOptions);
//# sourceMappingURL=index.js.map
