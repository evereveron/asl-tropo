/**!
 *
 * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.
 */

import {curry, defaults as lodashDefaults, isString} from 'lodash';
import HttpStatusInterceptor from './interceptors/http-status';
import _request from './request';

// Curry protorequest so we generate a function with default options built in.
const protorequest = curry(function protorequest(defaultOptions, options) {
  // allow for options to be a string (and therefore expect options in the third
  // position) to match request's api.
  if (isString(options)) {
    const uri = options;
    options = arguments[2] || {};
    options.uri = uri;
  }

  lodashDefaults(options, defaultOptions);

  // TODO figure out how to throw an error if `options.interceptors` does not
  // contain an instance of HttpStatusInterceptor

  options.logger = options.logger || console;

  return _request(options);
});

const defaultOptions = {
  json: true,
  interceptors: [
    HttpStatusInterceptor.create()
  ]
};

// const request = protorequest(defaultOptions);
export const defaults = protorequest;
export const request = protorequest(defaultOptions);
export {default as ProgressEvent} from './progress-event';
export {default as Interceptor} from './lib/interceptor';
export {default as HttpError} from './http-error';
export {default as HttpStatusInterceptor} from './interceptors/http-status';
