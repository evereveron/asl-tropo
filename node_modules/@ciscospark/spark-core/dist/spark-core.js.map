{"version":3,"sources":["../src/spark-core.js"],"names":[],"mappings":"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","file":"spark-core.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport AmpState from 'ampersand-state';\nimport config from './config';\nimport {defaults as requestDefaults, HttpStatusInterceptor} from '@ciscospark/http-core';\nimport {get, isFunction, merge} from 'lodash';\nimport NetworkTimingInterceptor from './interceptors/network-timing';\nimport RedirectInterceptor from './interceptors/redirect';\nimport RequestLoggerInterceptor from './interceptors/request-logger';\nimport ResponseLoggerInterceptor from './interceptors/response-logger';\nimport RequestTimingInterceptor from './interceptors/request-timing';\nimport SparkHttpError from './lib/spark-http-error';\nimport SparkTrackingIdInterceptor from './interceptors/spark-tracking-id';\n\nlet constructorCalled = false;\nconst derived = {};\nconst children = {};\n\nlet Spark;\n\nconst interceptors = {\n  SparkTrackingIdInterceptor() {\n    return SparkTrackingIdInterceptor.create({\n      prefix: get(this, `config.trackingIdPrefix`, `spark-js-sdk`)\n    });\n  },\n  RequestLoggerInterceptor: (process.env.ENABLE_NETWORK_LOGGING || process.env.ENABLE_VERBOSE_NETWORK_LOGGING) ? RequestLoggerInterceptor.create : undefined,\n  ResponseLoggerInterceptor: (process.env.ENABLE_NETWORK_LOGGING || process.env.ENABLE_VERBOSE_NETWORK_LOGGING) ? ResponseLoggerInterceptor.create : undefined,\n  RequestTimingInterceptor: RequestTimingInterceptor.create,\n  AuthInterceptor: undefined,\n  RedirectInterceptor: RedirectInterceptor.create,\n  HttpStatusInterceptor() {\n    return HttpStatusInterceptor.create({\n      error: SparkHttpError\n    });\n  },\n  NetworkTimingInterceptor: NetworkTimingInterceptor.create\n};\n\nconst preInterceptors = [\n  `ResponseLoggerInterceptor`,\n  `RequestTimingInterceptor`,\n  `SparkTrackingIdInterceptor`\n];\n\nconst postInterceptors = [\n  `NetworkTimingInterceptor`,\n  `RequestLoggerInterceptor`\n];\n\nconst SparkCore = AmpState.extend({\n  session: {\n    config: {\n      type: `object`\n    },\n    request: {\n      setOnce: true,\n      // It's supposed to be a function, but that's not a type defined in\n      // Ampersand\n      type: `any`\n    }\n  },\n\n  authenticate(...args) {\n    return this.credentials.authenticate(...args);\n  },\n\n  authorize(...args) {\n    return this.credentials.authorize(...args);\n  },\n\n  initialize() {\n    this.config = merge({}, config, this.config);\n\n    // Make nested events propagate in a consistent manner\n    Object.keys(children).forEach((key) => {\n      this.listenTo(this[key], `change`, (...args) => {\n        args.unshift(`change:${key}`);\n        this.trigger(...args);\n      });\n    });\n\n    const addInterceptor = (ints, key) => {\n      const interceptor = interceptors[key];\n\n      if (!isFunction(interceptor)) {\n        return ints;\n      }\n\n      ints.push(Reflect.apply(interceptor, this, []));\n      return ints;\n    };\n\n    let ints = [];\n    ints = preInterceptors.reduce(addInterceptor, ints);\n    ints = Object.keys(interceptors).filter((key) => !(preInterceptors.includes(key) || postInterceptors.includes(key))).reduce(addInterceptor, ints);\n    ints = postInterceptors.reduce(addInterceptor, ints);\n\n    this.request = requestDefaults({\n      json: true,\n      interceptors: ints\n    });\n  },\n\n  logout(...args) {\n    // TODO proxy methods should be registerable like properties\n    return this.credentials.logout(...args);\n  }\n});\n\n/**\n * @returns {undefined}\n */\nfunction makeSparkConstructor() {\n  Spark = SparkCore.extend({\n    children,\n    derived\n  });\n}\n\n/**\n * @param {Object} attrs\n * @param {Object} attrs.credentials\n * @param {Object} attrs.config\n * @returns {Spark}\n */\nexport default function ProxySpark(...args) {\n  if (!Spark) {\n    makeSparkConstructor();\n  }\n\n  constructorCalled = true;\n\n  const spark = new Spark(...args);\n  return spark;\n}\n\n/**\n * @method registerPlugin\n * @param {string} name\n * @param {function} constructor\n * @param {Object} options\n * @param {Array<string>} options.proxies\n * @param {Object} options.interceptors\n * @returns {null}\n */\nexport function registerPlugin(name, constructor, options) {\n  /* eslint complexity: [0] */\n  if (constructorCalled) {\n    const message = `registerPlugin() should not be called after instantiating a Spark instance`;\n    /* eslint no-console: [0] */\n    console.warn(message);\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== `production`) {\n      throw new Error(message);\n    }\n  }\n\n  options = options || {};\n\n  if (!children[name] || options.replace) {\n    children[name] = constructor;\n\n    if (options.proxies) {\n      options.proxies.forEach((key) => {\n        derived[key] = {\n          deps: [`${name}.${key}`],\n          fn() {\n            return this[name][key];\n          }\n        };\n      });\n    }\n\n    if (options.interceptors) {\n      Object.keys(options.interceptors).forEach((key) => {\n        interceptors[key] = options.interceptors[key];\n      });\n    }\n\n    makeSparkConstructor();\n  }\n}\n\nexport {default as SparkHttpError} from './lib/spark-http-error';\nexport {default as SparkPlugin} from './lib/spark-plugin';\nexport {default as AuthInterceptor} from './plugins/credentials/auth-interceptor';\nexport {default as NetworkTimingInterceptor} from './interceptors/network-timing';\nexport {default as RedirectInterceptor} from './interceptors/redirect';\nexport {default as RequestLoggerInterceptor} from './interceptors/request-logger';\nexport {default as RequestTimingInterceptor} from './interceptors/request-timing';\nexport {default as SparkTrackingIdInterceptor} from './interceptors/spark-tracking-id';\n"]}