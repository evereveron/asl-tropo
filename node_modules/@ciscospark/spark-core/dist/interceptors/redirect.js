'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _clone = require('lodash/clone');

var _clone2 = _interopRequireDefault(_clone);

var _defineProperty = require('babel-runtime/core-js/reflect/define-property');

var _defineProperty2 = _interopRequireDefault(_defineProperty);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _httpCore = require('@ciscospark/http-core');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**!
 *
 * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.
 */

var requestHeaderName = 'cisco-no-http-redirect';
var responseHeaderName = 'cisco-location';

var RedirectInterceptor = function (_Interceptor) {
  (0, _inherits3.default)(RedirectInterceptor, _Interceptor);

  function RedirectInterceptor(spark) {
    (0, _classCallCheck3.default)(this, RedirectInterceptor);

    var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(RedirectInterceptor).call(this));

    if (!spark) {
      throw new Error('`spark` is a required parameter');
    }

    (0, _defineProperty2.default)(_this, 'spark', {
      enumerable: false,
      value: spark
    });
    return _this;
  }

  (0, _createClass3.default)(RedirectInterceptor, [{
    key: 'onRequest',
    value: function onRequest(options) {
      if (options.uri.includes(this.spark.config.credentials.samlUrl) || options.uri.includes(this.spark.config.credentials.oauth.tokenUrl)) {
        return options;
      }

      options.headers[requestHeaderName] = true;
      options.$redirectCount = options.$redirectCount || 0;
      return options;
    }
  }, {
    key: 'onResponse',
    value: function onResponse(options, response) {
      if (response.headers && response.headers[responseHeaderName]) {
        options = (0, _clone2.default)(options);
        options.uri = response.headers[responseHeaderName];
        options.$redirectCount += 1;
        if (options.$redirectCount > this.spark.config.maxAppLevelRedirects) {
          return _promise2.default.reject(new Error('Maximum redirects exceeded'));
        }

        return this.spark.request(options);
      }

      return response;
    }
  }], [{
    key: 'create',
    value: function create() {
      return new RedirectInterceptor(this);
    }
  }]);
  return RedirectInterceptor;
}(_httpCore.Interceptor);

exports.default = RedirectInterceptor;
//# sourceMappingURL=redirect.js.map
