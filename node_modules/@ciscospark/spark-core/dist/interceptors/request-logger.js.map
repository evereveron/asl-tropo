{"version":3,"sources":["../../src/interceptors/request-logger.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAUqB;;;;;;;;;;8BAKT,SAAS;AACjB,cAAQ,GAAR,+EADiB;AAEjB,cAAQ,GAAR,aAAyB,QAAQ,MAAR,SAAzB,EAAmD,QAAQ,GAAR,CAAnD,CAFiB;AAGjB,cAAQ,GAAR,uBAAkC,mBAAI,OAAJ,uBAAlC;;AAHiB,UAKb,mBAAI,OAAJ,uBAAJ,EAAwC;AACtC,gBAAQ,GAAR,iBAA4B,mBAAI,OAAJ,uBAA5B,EADsC;OAAxC;AAGA,UAAI,mBAAI,IAAJ,wBAAJ,EAAsC;AACpC,gBAAQ,GAAR,aAAwB,mBAAI,IAAJ,wBAAxB,EADoC;OAAtC;AAGA,UAAM,MAAM,IAAI,IAAJ,EAAN,CAXW;AAYjB,UAAI,QAAQ,GAAR,CAAY,8BAAZ,EAA4C;AAC9C,gBAAQ,GAAR,wBAAmC,IAAI,OAAJ,EAAnC,EAAkD,IAAI,WAAJ,EAAlD,EAD8C;AAE9C,YAAI;;;AAGF,cAAI,QAAQ,IAAR,IAAgB,QAAQ,IAAR,CAAa,MAAb,IAAuB,CAAC,uBAAQ,QAAQ,IAAR,CAAT,IAA0B,CAAC,wBAAS,QAAQ,IAAR,CAAV,EAAyB;AAC5F,oBAAQ,GAAR,qBAAgC,yBAAe,oBAAK,OAAL,SAAf,EAAsC,IAAtC,EAA4C,CAA5C,CAAhC,EAD4F;WAA9F,MAGK;AACH,oBAAQ,GAAR,qBAAgC,yBAAe,OAAf,EAAwB,IAAxB,EAA8B,CAA9B,CAAhC,EADG;WAHL;SAHF,CAUA,OAAO,CAAP,EAAU;AACR,kBAAQ,IAAR,yCAAqD,CAArD,EADQ;SAAV;OAZF;;AAiBA,aAAO,kBAAQ,OAAR,CAAgB,OAAhB,CAAP,CA7BiB;;;;mCAgCJ,SAAS,QAAQ;;;AAG9B,WAAK,SAAL,CAAe,OAAf,EAH8B;AAI9B,cAAQ,KAAR,qBAAkC,OAAO,KAAP,CAAlC,CAJ8B;AAK9B,cAAQ,GAAR,8EAL8B;;AAO9B,aAAO,kBAAQ,MAAR,CAAe,MAAf,CAAP,CAP8B;;;;6BApChB;AACd,aAAO,IAAI,wBAAJ,EAAP,CADc;;;SADG","file":"request-logger.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n */\n\n /* eslint no-console:[0] */\n\nimport {get, has, isArray, isString, omit} from 'lodash';\nimport {Interceptor} from '@ciscospark/http-core';\n\nexport default class RequestLoggerInterceptor extends Interceptor {\n  static create() {\n    return new RequestLoggerInterceptor();\n  }\n\n  onRequest(options) {\n    console.log(`/**********************************************************************\\\\ `);\n    console.log(`Request:`, (options.method || `GET`), options.uri);\n    console.log(`WEBEX_TRACKINGID: `, get(options, `headers.trackingid`));\n    /* istanbul ignore next */\n    if (has(options, `headers.x-trans-id`)) {\n      console.log(`X-Trans-ID: `, get(options, `headers.x-trans-id`));\n    }\n    if (has(this, `spark.device.userId`)) {\n      console.log(`User ID:`, get(this, `spark.device.userId`));\n    }\n    const now = new Date();\n    if (process.env.ENABLE_VERBOSE_NETWORK_LOGGING) {\n      console.log(`timestamp (start): `, now.getTime(), now.toISOString());\n      try {\n        // Determine if body is a buffer without relying on Buffer to avoid\n        // node/browser conflicts.\n        if (options.body && options.body.length && !isArray(options.body) && !isString(options.body)) {\n          console.log(`Request Options:`, JSON.stringify(omit(options, `body`), null, 2));\n        }\n        else {\n          console.log(`Request Options:`, JSON.stringify(options, null, 2));\n        }\n      }\n      catch (e) {\n        console.warn(`Could not stringify request options:`, e);\n      }\n    }\n\n    return Promise.resolve(options);\n  }\n\n  onRequestError(options, reason) {\n    // We need to do the normal onRequest logging, but then log how the request\n    // failed since the response logger won't be called.\n    this.onRequest(options);\n    console.error(`Request Failed: `, reason.stack);\n    console.log(`\\\\**********************************************************************/`);\n\n    return Promise.reject(reason);\n  }\n}\n"]}