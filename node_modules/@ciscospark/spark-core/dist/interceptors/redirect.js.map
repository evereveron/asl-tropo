{"version":3,"sources":["../../src/interceptors/redirect.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA,IAAM,4CAAN;AACA,IAAM,qCAAN;;IAEqB;;;AACnB,WADmB,mBACnB,CAAY,KAAZ,EAAmB;wCADA,qBACA;;6FADA,iCACA;;AAGjB,QAAI,CAAC,KAAD,EAAQ;AACV,YAAM,IAAI,KAAJ,mCAAN,CADU;KAAZ;;AAIA,kDAAsC;AACpC,kBAAY,KAAZ;AACA,aAAO,KAAP;KAFF,EAPiB;;GAAnB;;6BADmB;;8BAkBT,SAAS;AACjB,UAAI,QAAQ,GAAR,CAAY,QAAZ,CAAqB,KAAK,KAAL,CAAW,MAAX,CAAkB,WAAlB,CAA8B,OAA9B,CAArB,IAA+D,QAAQ,GAAR,CAAY,QAAZ,CAAqB,KAAK,KAAL,CAAW,MAAX,CAAkB,WAAlB,CAA8B,KAA9B,CAAoC,QAApC,CAApF,EAAmI;AACrI,eAAO,OAAP,CADqI;OAAvI;;AAIA,cAAQ,OAAR,CAAgB,iBAAhB,IAAqC,IAArC,CALiB;AAMjB,cAAQ,cAAR,GAAyB,QAAQ,cAAR,IAA0B,CAA1B,CANR;AAOjB,aAAO,OAAP,CAPiB;;;;+BAUR,SAAS,UAAU;AAC5B,UAAI,SAAS,OAAT,IAAoB,SAAS,OAAT,CAAiB,kBAAjB,CAApB,EAA0D;AAC5D,kBAAU,qBAAM,OAAN,CAAV,CAD4D;AAE5D,gBAAQ,GAAR,GAAc,SAAS,OAAT,CAAiB,kBAAjB,CAAd,CAF4D;AAG5D,gBAAQ,cAAR,IAA0B,CAA1B,CAH4D;AAI5D,YAAI,QAAQ,cAAR,GAAyB,KAAK,KAAL,CAAW,MAAX,CAAkB,oBAAlB,EAAwC;AACnE,iBAAO,kBAAQ,MAAR,CAAe,IAAI,KAAJ,8BAAf,CAAP,CADmE;SAArE;;AAIA,eAAO,KAAK,KAAL,CAAW,OAAX,CAAmB,OAAnB,CAAP,CAR4D;OAA9D;;AAWA,aAAO,QAAP,CAZ4B;;;;6BAdd;AACd,aAAO,IAAI,mBAAJ,CAAwB,IAAxB,CAAP,CADc;;;SAdG","file":"redirect.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {clone} from 'lodash';\nimport {Interceptor} from '@ciscospark/http-core';\n\nconst requestHeaderName = `cisco-no-http-redirect`;\nconst responseHeaderName = `cisco-location`;\n\nexport default class RedirectInterceptor extends Interceptor {\n  constructor(spark) {\n    super();\n\n    if (!spark) {\n      throw new Error(`\\`spark\\` is a required parameter`);\n    }\n\n    Reflect.defineProperty(this, `spark`, {\n      enumerable: false,\n      value: spark\n    });\n  }\n\n  static create() {\n    return new RedirectInterceptor(this);\n  }\n\n  onRequest(options) {\n    if (options.uri.includes(this.spark.config.credentials.samlUrl) || options.uri.includes(this.spark.config.credentials.oauth.tokenUrl)) {\n      return options;\n    }\n\n    options.headers[requestHeaderName] = true;\n    options.$redirectCount = options.$redirectCount || 0;\n    return options;\n  }\n\n  onResponse(options, response) {\n    if (response.headers && response.headers[responseHeaderName]) {\n      options = clone(options);\n      options.uri = response.headers[responseHeaderName];\n      options.$redirectCount += 1;\n      if (options.$redirectCount > this.spark.config.maxAppLevelRedirects) {\n        return Promise.reject(new Error(`Maximum redirects exceeded`));\n      }\n\n      return this.spark.request(options);\n    }\n\n    return response;\n  }\n}\n"]}