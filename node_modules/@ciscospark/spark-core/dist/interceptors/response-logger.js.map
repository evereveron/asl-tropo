{"version":3,"sources":["../../src/interceptors/response-logger.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAUqB;;;;;;;;;;+BAKR,SAAS,UAAU;AAC5B,UAAM,MAAM,IAAI,IAAJ,EAAN,CADsB;AAE5B,WAAK,mBAAL,CAAyB,OAAzB,EAAkC,QAAlC,EAF4B;;AAI5B,UAAI,QAAQ,GAAR,CAAY,8BAAZ,EAA4C;AAC9C,gBAAQ,GAAR,sBAAiC,IAAI,OAAJ,EAAjC,EAAgD,IAAI,WAAJ,EAAhD,EAD8C;;AAG9C,YAAI,OAAO,SAAS,IAAT,aAAP,IAAqC,OAAO,QAAP,CAAgB,SAAS,IAAT,CAArD,EAAqE;AACvE,kBAAQ,GAAR,oDADuE;SAAzE,MAGK,IAAI,OAAO,SAAS,IAAT,aAAP,EAAmC;AAC1C,cAAI;AACF,oBAAQ,GAAR,eAA0B,yBAAe,SAAS,IAAT,EAAe,IAA9B,EAAoC,CAApC,CAA1B,EADE;WAAJ,CAGA,OAAO,GAAP,EAAY;AACV,oBAAQ,GAAR,qCAAgD,GAAhD,EADU;WAAZ;SAJG;OANP;AAeA,cAAQ,GAAR,8EAnB4B;;AAqB5B,aAAO,QAAP,CArB4B;;;;oCAwBd,SAAS,QAAQ;AAC/B,UAAM,MAAM,IAAI,IAAJ,EAAN,CADyB;AAE/B,WAAK,mBAAL,CAAyB,OAAzB,EAAkC,MAAlC,EAF+B;;AAI/B,UAAI,QAAQ,GAAR,CAAY,8BAAZ,EAA4C;AAC9C,gBAAQ,GAAR,sBAAiC,IAAI,OAAJ,EAAjC,EAAgD,IAAI,WAAJ,EAAhD,EAD8C;AAE9C,YAAI;AACF,kBAAQ,KAAR,eAA4B,yBAAe,OAAO,IAAP,EAAa,IAA5B,EAAkC,CAAlC,CAA5B,EADE;SAAJ,CAGA,OAAO,GAAP,EAAY;AACV,kBAAQ,KAAR,eAA4B,OAAO,IAAP,CAA5B,CADU;SAAZ;OALF;AASA,cAAQ,GAAR,8EAb+B;;AAe/B,aAAO,kBAAQ,MAAR,CAAe,MAAf,CAAP,CAf+B;;;;wCAkBb,SAAS,UAAU;AACrC,cAAQ,GAAR,iBAA4B,SAAS,UAAT,CAA5B,CADqC;AAErC,cAAQ,GAAR,sBAAiC,mBAAI,OAAJ,2BAAsC,mBAAI,QAAJ,uBAAtC,CAAjC,CAFqC;AAGrC,cAAQ,GAAR,sBAAiC,QAAQ,QAAR,CAAiB,UAAjB,GAA8B,QAAQ,QAAR,CAAiB,YAAjB,CAA/D,CAHqC;AAIrC,cAAQ,GAAR,yBAAoC,QAAQ,QAAR,CAAiB,UAAjB,GAA8B,QAAQ,QAAR,CAAiB,YAAjB,CAAlE,CAJqC;;;;6BA9CvB;AACd,aAAO,IAAI,yBAAJ,EAAP,CADc;;;SADG","file":"response-logger.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n */\n\n /* eslint no-console:[0] */\n\nimport {get} from 'lodash';\nimport {Interceptor} from '@ciscospark/http-core';\n\nexport default class ResponseLoggerInterceptor extends Interceptor {\n  static create() {\n    return new ResponseLoggerInterceptor();\n  }\n\n  onResponse(options, response) {\n    const now = new Date();\n    this.printResponseHeader(options, response);\n\n    if (process.env.ENABLE_VERBOSE_NETWORK_LOGGING) {\n      console.log(`timestamp (end): `, now.getTime(), now.toISOString());\n\n      if (typeof response.body === `string` || Buffer.isBuffer(response.body)) {\n        console.log(`Response: `, `Not printed, it\\`s probably a file`);\n      }\n      else if (typeof response.body === `object`) {\n        try {\n          console.log(`Response: `, JSON.stringify(response.body, null, 2));\n        }\n        catch (err) {\n          console.log(`Response: `, `[Not Serializable]`, err);\n        }\n      }\n    }\n    console.log(`\\\\**********************************************************************/`);\n\n    return response;\n  }\n\n  onResponseError(options, reason) {\n    const now = new Date();\n    this.printResponseHeader(options, reason);\n\n    if (process.env.ENABLE_VERBOSE_NETWORK_LOGGING) {\n      console.log(`timestamp (end): `, now.getTime(), now.toISOString());\n      try {\n        console.error(`Response: `, JSON.stringify(reason.body, null, 2));\n      }\n      catch (err) {\n        console.error(`Response: `, reason.body);\n      }\n    }\n    console.log(`\\\\**********************************************************************/`);\n\n    return Promise.reject(reason);\n  }\n\n  printResponseHeader(options, response) {\n    console.log(`Status Code:`, response.statusCode);\n    console.log(`WEBEX_TRACKINGID:`, get(options, `headers.trackingid`) || get(response, `headers.trackingid`));\n    console.log(`Network duration:`, options.$timings.networkEnd - options.$timings.networkStart);\n    console.log(`Processing duration:`, options.$timings.requestEnd - options.$timings.requestStart);\n  }\n}\n"]}