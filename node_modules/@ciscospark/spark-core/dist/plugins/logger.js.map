{"version":3,"sources":["../../src/plugins/logger.js"],"names":[],"mappings":";;;;;;;;;;;;;;AAGA,IAAM,aAAa;AACjB,SAAO,OAAP;AACA,QAAM,gBAAN;AACA,QAAM,OAAN;AACA,SAAO,eAAP;AACA,SAAO,wBAAP;CALI;;;;;;;;;AAeN,SAAS,iBAAT,CAA2B,KAA3B,EAAkC;AAChC,MAAI,QAAQ,WAAW,KAAX,CAAR,CAD4B;AAEhC,MAAI,KAAJ,EAAW;AACT,YAAQ,MAAM,KAAN,EAAR,CADS;AAET,WAAM,CAAC,QAAQ,KAAR,CAAD,EAAiB;AACrB,cAAQ,MAAM,GAAN,EAAR,CADqB;KAAvB;GAFF;;AAOA,SAAO,QAAQ,KAAR,EAAe,IAAf,CAAoB,OAApB,CAAP,CATgC;CAAlC;;AAYA,IAAM,SAAS,sBAAY,MAAZ,CAAmB;AAChC,qBADgC;AAEhC,SAAO,0BAAP;AACA,QAAM,yBAAN;AACA,OAAK,wBAAL;AACA,QAAM,yBAAN;AACA,SAAO,0BAAP;AACA,SAAO,0BAAP;CAPa,CAAT;;AAUN,yCAAyB,MAAzB;;kBAEe","file":"logger.js","sourcesContent":["import {registerPlugin} from '../spark-core';\nimport SparkPlugin from '../lib/spark-plugin';\n\nconst precedence = {\n  error: [`log`],\n  warn: [`error`, `log`],\n  info: [`log`],\n  debug: [`info`, `log`],\n  trace: [`debug`, `info`, `log`]\n};\n\n/**\n * Assigns the specified console method to Logger; uses `precedence` to fallback\n * to other console methods if the current environment doesn't provide the\n * specified level.\n * @param {string} level\n * @returns {Function}\n */\nfunction wrapConsoleMethod(level) {\n  let impls = precedence[level];\n  if (impls) {\n    impls = impls.slice();\n    while(!console[level]) {\n      level = impls.pop();\n    }\n  }\n\n  return console[level].bind(console);\n}\n\nconst Logger = SparkPlugin.extend({\n  namespace: `Logger`,\n  error: wrapConsoleMethod(`error`),\n  warn: wrapConsoleMethod(`warn`),\n  log: wrapConsoleMethod(`log`),\n  info: wrapConsoleMethod(`info`),\n  debug: wrapConsoleMethod(`debug`),\n  trace: wrapConsoleMethod(`trace`)\n});\n\nregisterPlugin(`logger`, Logger);\n\nexport default Logger;\n"]}