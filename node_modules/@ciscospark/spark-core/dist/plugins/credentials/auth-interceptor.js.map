{"version":3,"sources":["../../../src/plugins/credentials/auth-interceptor.js"],"names":[],"mappings":"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","file":"auth-interceptor.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {Interceptor} from '@ciscospark/http-core';\n\nexport default class AuthInterceptor extends Interceptor {\n  constructor(spark) {\n    super();\n\n    if (!spark) {\n      throw new Error(`\\`spark\\` is a required parameter`);\n    }\n\n    Reflect.defineProperty(this, `spark`, {\n      enumerable: false,\n      value: spark\n    });\n  }\n\n  static create() {\n    return new AuthInterceptor(this);\n  }\n\n  onRequest(options) {\n    // If Authorizations is already set, don't overwrite it\n    if (`authorization` in options.headers) {\n      // If Authorization is set to null, false, or undefined, delete it to\n      // prevent a CORS preflight.\n      if (!options.headers.authorization) {\n        Reflect.deleteProperty(options.headers, `authorization`);\n      }\n      return options;\n    }\n\n    let promise;\n    if (this.requiresCredentials(options)) {\n      promise = this.spark.credentials.getAuthorization();\n    }\n    else if (this.requiresClientCredentials(options)) {\n      promise = this.spark.credentials.getClientCredentials();\n    }\n\n    if (!promise) {\n      return options;\n    }\n\n    return promise\n      .then((authorization) => {\n        options.headers.authorization = authorization;\n        return options;\n      });\n  }\n\n  onReject(options, reason) {\n    if (this.shouldAttemptReauth(reason, options)) {\n      this.spark.logger.info(`auth: received 401, attempting to reauthenticate`);\n\n      if (reason.options.headers) {\n        Reflect.deleteProperty(reason.options.headers, `authorization`);\n      }\n\n      return this.spark.credentials.authorize({force: true})\n        .then(() => {\n          return this.replay(options);\n        });\n    }\n\n    return Promise.reject(reason);\n  }\n\n  replay(options) {\n    options.replayCount = options.replayCount || 1;\n\n    this.spark.logger.info(`auth: replaying request ${options.replayCount} time`);\n\n    if (options.replayCount > this.spark.config.maxReplayAttempts) {\n      this.spark.logger.error(`auth: failed after ${this.spark.config.maxReplayAttempts} replay attempts`);\n      return Promise.reject(new Error(`Failed after ${this.spark.config.maxReplayAttempts} replay attempts`));\n    }\n\n    return this.spark.request(options);\n  }\n\n  requiresCredentials(options) {\n    this.spark.logger.warn(`AuthInterceptor: #requiresCredentials should be overridden`);\n    if (options.uri.includes(this.spark.config.credentials.oauth.tokenUrl)) {\n      return false;\n    }\n\n    if (options.uri.includes(this.spark.config.credentials.oauth.authorizeUrl)) {\n      return false;\n    }\n\n    if (options.uri.includes(this.spark.config.credentials.samlUrl)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  requiresClientCredentials() {\n    this.spark.logger.warn(`AuthInterceptor: #requiresClientCredentials should be overridden`);\n    return false;\n  }\n\n  shouldAttemptReauth(reason, options) {\n    if (options && options.shouldRefreshAccessToken === false) {\n      return false;\n    }\n\n    if (reason.statusCode === 401) {\n      return true;\n    }\n\n    return false;\n  }\n}\n"]}