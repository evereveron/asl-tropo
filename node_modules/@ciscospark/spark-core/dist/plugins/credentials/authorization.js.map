{"version":3,"sources":["../../../src/plugins/credentials/authorization.js"],"names":[],"mappings":"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","file":"authorization.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n */\n\n/* eslint camelcase: [0] */\n\nimport grantErrors from './grant-errors';\nimport {has, pick} from 'lodash';\nimport {oneFlight} from '@ciscospark/common';\nimport SparkPlugin from '../../lib/spark-plugin';\n\nconst AuthorizationBase = SparkPlugin.extend({\n  derived: {\n    canRefresh: {\n      deps: [`refresh_token`],\n      fn() {\n        return !!this.refresh_token;\n      }\n    },\n\n    isAuthenticated: {\n      deps: [\n        `access_token`,\n        `refresh_token`\n      ],\n      fn() {\n        return !!(this.access_token || this.refresh_token);\n      }\n    },\n\n    isExpired: {\n      cache: false,\n      deps: [\n        `access_token`,\n        `expires`\n      ],\n      fn() {\n        return !!(this.access_token && this.expires && Date.now() > this.expires);\n      }\n    },\n\n    isValid: {\n      cache: false,\n      deps: [\n        `access_token`,\n        `isExpired`,\n        `canRefresh`\n      ],\n      fn() {\n        return (this.access_token && !this.isExpired) || this.canRefresh;\n      }\n    }\n  },\n\n  namespace: `Credentials`,\n\n  props: {\n    access_token: `string`,\n    expires: `number`,\n    expires_in: `number`,\n    refresh_token: `string`,\n    refresh_token_expires: `number`,\n    refresh_token_expires_in: `number`,\n    token_type: {\n      default: `Bearer`,\n      type: `string`\n    }\n  },\n\n  session: {\n    isRefreshing: {\n      default: false,\n      type: `boolean`\n    }\n  },\n\n  toString() {\n    if (this.token_type && this.access_token) {\n      return `${this.token_type} ${this.access_token}`;\n    }\n  },\n\n  initialize(...args) {\n    const now = Date.now();\n\n    if (!this.expires && this.expires_in) {\n      this.expires = now + this.expires_in*1000;\n    }\n\n    if (!this.refresh_token_expires && this.refresh_token_expires_in) {\n      this.refresh_token_expires = now + this.refresh_token_expires_in*1000;\n    }\n\n    return Reflect.apply(SparkPlugin.prototype.initialize, this, args);\n  },\n\n  refresh: oneFlight(`refresh`, function refresh() {\n    if (!this.canRefresh) {\n      return Promise.reject(new Error(`Authorization cannot be refreshed`));\n    }\n\n    const vars = {\n      'oauth.client_id': `CLIENT_ID`,\n      'oauth.client_secret': `CLIENT_SECRET`,\n      'oauth.redirect_uri': `REDIRECT_URI`\n    };\n\n    for (const key in vars) {\n      if (!has(this.config, key)) {\n        const baseVar = vars[key];\n        return Promise.reject(new Error(`config.credentials.${key} or CISCOSPARK_${baseVar} or COMMON_IDENTITY_${baseVar} or ${baseVar} must be defined`));\n      }\n    }\n\n    this.isRefreshing = true;\n\n    this.logger.info(`authorization: refreshing access token`);\n\n    return this.request({\n      method: `POST`,\n      uri: this.config.oauth.tokenUrl,\n      form: {\n        grant_type: `refresh_token`,\n        redirect_uri: this.config.oauth.redirect_uri,\n        refresh_token: this.refresh_token\n      },\n      auth: {\n        user: this.config.oauth.client_id,\n        pass: this.config.oauth.client_secret,\n        sendImmediately: true\n      },\n      shouldRefreshAccessToken: false\n    })\n      .then((res) => {\n        // If the authentication server did not send back a refresh_token, copy\n        // the current refresh token and related values onto the response.\n        if (!res.body.refresh_token) {\n          Object.assign(res.body, pick(this, `refresh_token`, `refresh_token_expires`, `refresh_token_expires_in`));\n        }\n\n        this.logger.info(`authorization: access token refreshed`);\n\n        // this.constructor *should* be Authorization. We can`t use it by name\n        // because this file defines AuthorizationBase.\n        return new this.constructor(res.body);\n      })\n      .catch((reason) => {\n        if (reason.statusCode !== 400) {\n          return Promise.reject(reason);\n        }\n\n        const ErrorConstructor = grantErrors.select(reason.body.error);\n        return Promise.reject(new ErrorConstructor(reason._res || reason));\n      })\n      .then((res) => {\n        this.isRefreshing = false;\n        return res;\n      })\n      .catch((res) => {\n        this.isRefreshing = false;\n        return Promise.reject(res);\n      });\n  }),\n\n  revoke: oneFlight(`revoke`, function revoke() {\n    // TODO for confidential clients, send a request to the app server to revoke\n    // the token.\n    if (this.isExpired || !this.isValid) {\n      this.logger.info(`authorization: access token already expired or invalid, not revoking`);\n\n      return Promise.resolve();\n    }\n\n    this.logger.info(`authorization: revoking access token`);\n\n    const vars = {\n      'oauth.client_id': `CLIENT_ID`,\n      'oauth.client_secret': `CLIENT_SECRET`\n    };\n\n    for (const key in vars) {\n      if (!has(this.config, key)) {\n        const baseVar = vars[key];\n        return Promise.reject(new Error(`config.credentials.${key} or CISCOSPARK_${baseVar} or COMMON_IDENTITY_${baseVar} or ${baseVar} must be defined`));\n      }\n    }\n\n    return this.request({\n      method: `POST`,\n      uri: this.config.oauth.revokeUrl,\n      form: {\n        token: this.access_token,\n        token_type_hint: `access_token`\n      },\n      auth: {\n        user: this.config.oauth.client_id,\n        pass: this.config.oauth.client_secret,\n        sendImmediately: true\n      },\n      shouldRefreshAccessToken: false\n    })\n      .then((res) => {\n        this.logger.info(`authorization: authorization revoked`);\n        this.unset(Object.keys(this.getAttributes({props: true})));\n        return res;\n      })\n      .catch((reason) => {\n        if (reason.statusCode !== 400) {\n          return Promise.reject(reason);\n        }\n\n        const ErrorConstructor = grantErrors.select(reason.body.error);\n        return Promise.reject(new ErrorConstructor(reason._res || reason));\n      });\n  })\n});\n\nexport default AuthorizationBase;\n"]}