'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _deleteProperty = require('babel-runtime/core-js/reflect/delete-property');

var _deleteProperty2 = _interopRequireDefault(_deleteProperty);

var _defineProperty = require('babel-runtime/core-js/reflect/define-property');

var _defineProperty2 = _interopRequireDefault(_defineProperty);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _httpCore = require('@ciscospark/http-core');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var AuthInterceptor = function (_Interceptor) {
  (0, _inherits3.default)(AuthInterceptor, _Interceptor);

  function AuthInterceptor(spark) {
    (0, _classCallCheck3.default)(this, AuthInterceptor);

    var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(AuthInterceptor).call(this));

    if (!spark) {
      throw new Error('`spark` is a required parameter');
    }

    (0, _defineProperty2.default)(_this, 'spark', {
      enumerable: false,
      value: spark
    });
    return _this;
  }

  (0, _createClass3.default)(AuthInterceptor, [{
    key: 'onRequest',
    value: function onRequest(options) {
      // If Authorizations is already set, don't overwrite it
      if ('authorization' in options.headers) {
        // If Authorization is set to null, false, or undefined, delete it to
        // prevent a CORS preflight.
        if (!options.headers.authorization) {
          (0, _deleteProperty2.default)(options.headers, 'authorization');
        }
        return options;
      }

      var promise = undefined;
      if (this.requiresCredentials(options)) {
        promise = this.spark.credentials.getAuthorization();
      } else if (this.requiresClientCredentials(options)) {
        promise = this.spark.credentials.getClientCredentials();
      }

      if (!promise) {
        return options;
      }

      return promise.then(function (authorization) {
        options.headers.authorization = authorization;
        return options;
      });
    }
  }, {
    key: 'onReject',
    value: function onReject(options, reason) {
      var _this2 = this;

      if (this.shouldAttemptReauth(reason, options)) {
        this.spark.logger.info('auth: received 401, attempting to reauthenticate');

        if (reason.options.headers) {
          (0, _deleteProperty2.default)(reason.options.headers, 'authorization');
        }

        return this.spark.credentials.authorize({ force: true }).then(function () {
          return _this2.replay(options);
        });
      }

      return _promise2.default.reject(reason);
    }
  }, {
    key: 'replay',
    value: function replay(options) {
      options.replayCount = options.replayCount || 1;

      this.spark.logger.info('auth: replaying request ' + options.replayCount + ' time');

      if (options.replayCount > this.spark.config.maxReplayAttempts) {
        this.spark.logger.error('auth: failed after ' + this.spark.config.maxReplayAttempts + ' replay attempts');
        return _promise2.default.reject(new Error('Failed after ' + this.spark.config.maxReplayAttempts + ' replay attempts'));
      }

      return this.spark.request(options);
    }
  }, {
    key: 'requiresCredentials',
    value: function requiresCredentials(options) {
      this.spark.logger.warn('AuthInterceptor: #requiresCredentials should be overridden');
      if (options.uri.includes(this.spark.config.credentials.oauth.tokenUrl)) {
        return false;
      }

      if (options.uri.includes(this.spark.config.credentials.oauth.authorizeUrl)) {
        return false;
      }

      if (options.uri.includes(this.spark.config.credentials.samlUrl)) {
        return false;
      }

      return true;
    }
  }, {
    key: 'requiresClientCredentials',
    value: function requiresClientCredentials() {
      this.spark.logger.warn('AuthInterceptor: #requiresClientCredentials should be overridden');
      return false;
    }
  }, {
    key: 'shouldAttemptReauth',
    value: function shouldAttemptReauth(reason, options) {
      if (options && options.shouldRefreshAccessToken === false) {
        return false;
      }

      if (reason.statusCode === 401) {
        return true;
      }

      return false;
    }
  }], [{
    key: 'create',
    value: function create() {
      return new AuthInterceptor(this);
    }
  }]);
  return AuthInterceptor;
}(_httpCore.Interceptor); /**!
                           *
                           * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.
                           */

exports.default = AuthInterceptor;
//# sourceMappingURL=auth-interceptor.js.map
